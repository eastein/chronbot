#!/usr/bin/env python

import traceback
import time
import os, os.path
import json
import sys
import mediorc
import script_execute as se
import chronlib as cl
import Queue
import datetime
import random

class A(object) :
	PENDING = 0
	YES = 1
	NO = 2

class ChronCore(object) :
	def __init__(self, nick, chan, persist_file, admin_password) :
		self.nick = nick
		self.chan = chan
		self.persist_file = persist_file
		self.admin_password = admin_password
		self.bot = None
		self._log = list()
		self.ihooks = set()
		self.outq = Queue.Queue()
		self.last_cron = self.minute_only(datetime.datetime.now())
		self.shutup_until = None
		self.crons = list()
		self.read()
	
	def read(self) :
		if self.persist_file is None :
			return
		
		if os.path.exists(self.persist_file) :
			crons = []
			for r in json.load(open(self.persist_file)) :
				r['cronline'] = cl.CronLine.from_dict(r['cronline'])
				crons.append(r)
			self.crons = crons

	def write(self) :
		if self.persist_file is None :
			return

		crons_output = [
			dict(r)
			for r in self.crons
		]
		for c in crons_output :
			c['cronline'] = c['cronline'].to_dict()
		json_str = json.dumps(c)

		fn_w = self.persist_file + '.inprog'
		fn_bak = self.persist_file + '.bak'

		if os.path.exists(self.persist_file) :
			os.rename(self.persist_file, fn_bak)

		fh_w = open(fn_w, 'w')
		json.dump(crons_output, fh_w)
		fh_w.close()

		os.rename(fn_w, self.persist_file)

	# 2 things get handled here
	# * start cron executes
	# * potentially send their first line(s)
	def do_work(self) :
		nowmin = self.minute_only(datetime.datetime.now())
		if nowmin != self.last_cron :
			self.last_cron = nowmin
			crons = list(self.crons)
			random.shuffle(crons)
			for c in crons :
				if c['approved'] != A.YES :
					continue

				cl = c['cronline']
				if cl.match(nowmin) :
					so = cl.command
					e = so.execute(self.setup_execution, self.send)

		if self.bot is not None :
			for msg in self.outq2list() :
				self.bot.connection.privmsg(self.chan, msg)

	def log(self, lo) :
		self._log.append(lo)

	def on_chat_recv(self, text) :
		#self.log(('in', text))
		for ih in set(self.ihooks) :
			self.termination_wrap(ih, ih, text)

	def termination_wrap(self, ih, c, *args, **kwargs) :
		try :
			c(*args, **kwargs)
			return True
		except se.Unhook :
			if ih in self.ihooks :
				self.ihooks.remove(ih)
			#self.log(('terminate', None))
			return False

	def setup_execution(self, initialize_function, ihook) :
		if self.termination_wrap(ihook, initialize_function) :
			self.ihooks.add(ihook)
	
	def send(self, text) :
		#self.log(('out', text))

		# implementation of shutting up
		if self.shutup_until is not None and datetime.datetime.now() < self.shutup_until :
			return

		self.outq.put(text)

	def sanitize(self, nick) :
		lowchar = ''.join([c for c in nick.lower() if c in [chr(i + ord('a')) for i in range(26)]])
		if lowchar :
			return lowchar
		return nick

	def handle_pm(self, nick, text) :
		return self.handle(nick, text, pm=True)

	def outq2list(self) :
		o = list()
		empty = False
		while not empty :
			try :
				o.append(self.outq.get(timeout=0))
			except Queue.Empty :
				empty = True
		return o

	def minute_only(self, dt) :
		return dt.replace(second=0, microsecond=0)

	def handle(self, nick, text, pm=False) :
		words = [w for w in text.split(' ') if w]
		who = self.sanitize(nick)
		if not pm :
			self.on_chat_recv(text)

		if words :
			if not pm and (words[0] == '!exec') :
				w = text.split(' ', 1)
				if len(w) == 2 :
					st = w[1]
					if st :
						so = se.Script(st)
						e = so.execute(self.setup_execution, self.send)
			elif not pm and (words[0] == '!addcron') :
				w = w = text.split(' ', 6)
				if len(w) == 7 :
					try :
						cron = {
							'cronline' : cl.CronLine(*(w[1:7])),
							'who' : who,
							'approved' : A.PENDING,
							'added' : time.time()
						}
						self.crons.append(cron)
						self.send('added to approval queue: %s' % str(cron['cronline']))
						self.write()
					except Exception, e :
						# this sucks, yup
						self.send(str(e))
				else :
					self.send('say what?')
			elif pm and (words[0] == '!queue') :
				# TODO iterate the approval queue, dump them all out (up to 3)
				emit = 0
				skipped = 0
				i = 0
				for i in range(len(self.crons)) :
					c = self.crons[i]
					if c['approved'] == A.PENDING :
						if emit >= 3 :
							skipped += 1
						else :
							emit += 1
							self.send('[%d] (by %s, %d sec ago): %s' % (i, c['who'], int(time.time() - c['added']), str(c['cronline'])))
				if skipped > 0 :
					self.send('and %d more' % skipped)
				if emit == 0 :
					self.send('nothing in the queue.')
			elif pm and (words[0] in ['!approve', '!reject']) :
				approve = words[0] == '!approve'
				
				ok = True
				if len(words) != 3 :
					ok = False
					self.send('usage: !(approve|reject) cron_number password')
				
				if ok :
					try :
						cron_number = int(words[1])
					except ValueError :
						self.send('cron_number must be an integer')
						ok = False
			
				if ok :
					try :
						c = self.crons[cron_number]
					except IndexError :
						self.send('no such cron')
						ok = False

				if ok :
					if words[2] != self.admin_password :
						self.send('wrong password.')
						ok = False

				if ok :
					a = {
						True: A.YES,
						False: A.NO
					}
					a = a[approve]

					if c['approved'] == a :
						self.send('already %sed' % words[0])
					else :
						c['approved'] = a
						self.send('okay.')
						self.write()


			# the below are just bad ways of handling the abuse problem
			elif not pm and (words[0] == '!shutup') :
				self.shutup_until = datetime.datetime.now() + datetime.timedelta(hours=1)

		return self.outq2list()

	def stop_hook(self) :
		pass

class ChronBot(mediorc.IRC) :
	def __init__(self, server, nick, chan, core) :
		self.core = core
		self.core.bot = self
		mediorc.IRC.__init__(self, server, nick, chan)
	
	def on_join(self, c, e) :
		self.initialize_pinger()

	def on_privmsg(self, c, e) :
		nick = e.source.split("!")[0]
		chan = e.target
		txt = e.arguments[0]
		
		rmsg = self.core.handle_pm(nick, txt)
		if rmsg :
			if isinstance(rmsg, basestring) :
				rmsg = [rmsg]
			for msg in rmsg :
				self.connection.privmsg(nick, msg)

	def on_pubmsg(self, c, e) :
		nick = e.source.split("!")[0]
		chan = e.target
		txt = e.arguments[0]

		rmsg = self.core.handle(nick, txt)
		if rmsg :
			if isinstance(rmsg, basestring) :
				rmsg = [rmsg]
			for msg in rmsg :
				self.connection.privmsg(chan, msg)

	def do_work(self) :
		self.core.do_work()


class ChronThread(mediorc.IRCThread) :
	def __init__(self, server, nick, chan, core) :
		self.bot_create = lambda: ChronBot(server, nick, chan, core)
		self.stop_hook = core.stop_hook
		mediorc.IRCThread.__init__(self)

import sys, optparse

if __name__ == '__main__' :
	parser = optparse.OptionParser()
	parser.add_option('--workingdir', dest='workingdir', help="Directory to store state files in.")
	parser.add_option('--admin-password', '-p', dest='admin_password', help='Admin password to use to approve crons.')
	(opts, args) = parser.parse_args()
	
	persist_filename = os.path.join(opts.workingdir, 'chronbot.json')

	server, nick, chan = args


	core = ChronCore(nick, chan, persist_filename, opts.admin_password)
	s = ChronThread(server, nick, chan, core)
	try :
		s.run()
	except KeyboardInterrupt :
		s.stop()
